/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jahmm_testrun1;

import be.ac.ulg.montefiore.run.jahmm.Hmm;
import be.ac.ulg.montefiore.run.jahmm.ObservationInteger;
import be.ac.ulg.montefiore.run.jahmm.ObservationVector;
import be.ac.ulg.montefiore.run.jahmm.OpdfDiscreteFactory;
import be.ac.ulg.montefiore.run.jahmm.OpdfIntegerFactory;
import be.ac.ulg.montefiore.run.jahmm.OpdfMultiGaussianFactory;
import be.ac.ulg.montefiore.run.jahmm.io.FileFormatException;
import be.ac.ulg.montefiore.run.jahmm.io.ObservationSequencesReader;
import be.ac.ulg.montefiore.run.jahmm.io.ObservationVectorReader;
import be.ac.ulg.montefiore.run.jahmm.learn.BaumWelchLearner;
import be.ac.ulg.montefiore.run.jahmm.learn.BaumWelchScaledLearner;
import be.ac.ulg.montefiore.run.jahmm.learn.KMeansLearner;
import be.ac.ulg.montefiore.run.jahmm.toolbox.KullbackLeiblerDistanceCalculator;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.Vector;

/**
 *
 * @author Mohammadhia
 */
public class Jahmm {

    /**
     * @param args the command line arguments
     * @throws java.io.FileNotFoundException
     * @throws be.ac.ulg.montefiore.run.jahmm.io.FileFormatException
     */
    public static void main(String[] args) throws FileNotFoundException, IOException, FileFormatException {
        // TODO code application logic here
        int[][] data_coin = {{0,0,1,1,0,1,0},
                        {0,1,1,1,0},
                        {1,1,1,0,0,0,1,0,1,0,1}};
        System.out.println("Coin value: "+data_coin[0][1]);
//        FileReader fr = new FileReader("src/hmmArrayTraining2.txt");
//        BufferedReader br = new BufferedReader(fr);
//        
//        String currentLine;
//        while((currentLine = br.readLine()) != null){
//            System.out.println("{"+currentLine+"},");
//        }


        //81 sequences of observations; each with varying length
//        int[][] data = {{0, 0, 1, 1, 1, 1, 0, 0, 2, 1, 1, 4, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 4, 0, 0, 0, 0, 0, 1, 3, 0, 3, 0, 4, 4, 3, 0, 0, 3, 0, 0, 2, 8, 5, 5, 2, 5, 5, 5, 3, 2, 8, 8, 0, 0, 0, 1, 3, 0, 0, 0, 1, 1, 1, 1, 0, 4, 0, 0, 1, 0, 2, 8, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 2, 5, 3, 0, 0, 1, 1, 0, 2, 8, 5, 5, 2, 8, 8, 2, 0, 0, 1, 1, 1, 0},
//                        {0, 0, 0, 4, 4, 1, 1, 4, 4, 1, 4, 4, 1, 4, 1, 4, 0, 2, 0, 0, 0, 1, 4, 4, 1, 1, 4, 4, 4, 1, 4, 4, 0, 1, 4, 4, 4, 4, 4, 0, 0, 0, 1, 1, 4, 0, 1, 4, 1, 1, 1, 1, 1, 1, 4, 1, 4, 0, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 5, 0, 0, 4, 4, 4, 4, 4, 4, 4, 1, 4, 0, 1, 1, 1, 1, 1, 1, 4, 1, 0, 0, 3, 0, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 4},
//                        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 5, 5, 2, 2, 2, 5, 5, 5, 5, 5, 5, 2, 5, 5, 2, 5, 5, 5, 2, 1, 0, 0, 0, 0, 0, 2, 2, 2, 5, 5, 2, 1, 4, 1, 3, 1, 1, 1, 4, 1, 3, 2, 8, 0, 1, 4, 4, 1, 1, 0, 0, 7, 3, 2, 2, 2, 0, 0, 1, 1, 2, 2, 8, 2, 0, 2, 8, 2, 5, 5, 8, 2, 8, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 2, 5},
//                        {1, 1, 1, 1, 1, 1, 1, 4, 1, 4, 1, 2, 5, 8, 5, 8, 8, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 2, 2, 0, 5, 0, 2, 8, 8, 8, 3, 5, 8, 8, 0, 2, 2, 3, 1, 4, 4, 1, 0, 0, 2, 5, 3, 5, 8, 8, 2, 5, 2, 8, 5, 5, 8, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 3, 1, 0, 1, 0, 4, 0, 0, 4, 2, 5, 5, 2, 5, 2, 5, 5},
//                        {1, 1, 1, 1, 4, 1, 4, 0, 0, 0, 0, 2, 2, 5, 5, 5, 1, 1, 4, 4, 1, 1, 1, 4, 1, 1, 1, 1, 0, 3, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 0, 0, 4, 1, 4, 4, 1, 4, 4, 1, 4, 4, 1, 4, 4, 3, 1, 4, 0, 0, 0, 1, 2, 8, 7, 8, 8, 4, 3, 1, 4, 3, 0, 2, 0, 2, 0, 2, 5, 5, 2, 3, 1, 5, 5, 8, 3, 4, 1, 4, 4, 4, 0, 2, 5, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0},
//                        {0, 4, 1, 0, 0, 0, 0, 0, 4, 1, 2, 5, 5, 5, 5, 2, 1, 1, 1, 1, 1, 1, 2, 5, 5, 1, 1, 1, 2, 5, 5, 5, 2, 2, 5, 5, 1, 0, 2, 5, 5, 1, 1, 1, 1, 0, 4, 0, 4, 2, 5, 5, 5, 5, 5, 2, 5, 5, 5, 2, 8, 5, 0, 2, 5, 5, 2, 5, 5, 5, 2, 5, 2, 5, 5, 5, 5, 0, 2, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2, 5, 2, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 2, 2, 5, 5, 8, 5, 5, 5, 8},
//                        {0, 0, 1, 1, 0, 4, 1, 0, 2, 2, 2, 8, 5, 8, 8, 8, 8, 8, 2, 8, 8, 5, 8, 8, 8, 8, 5, 8, 8, 5, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 8, 2, 2, 2, 2, 5, 8, 8, 8, 8, 5, 2, 5, 3, 0, 2, 8, 2, 8, 2},
//                        {0, 0, 2, 0, 4, 1, 1, 1, 0, 4, 1, 1, 1, 1, 4, 1, 0, 4, 1, 6, 0, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 2, 2, 5, 8, 5, 3, 0, 2, 8, 8, 8, 8, 8, 5, 2, 8, 5, 2, 5, 2, 5, 2, 3, 2, 5, 3, 2, 8, 8, 8, 2, 8, 8, 8, 5, 8, 8, 2, 8, 8, 8, 8, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 8, 8, 2, 8, 8, 8, 5, 2, 8, 5, 2, 8, 5, 5, 5},
//                        {0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 0, 6, 3, 4, 1, 1, 2, 1, 1, 1, 1, 0, 2, 3, 2, 2, 3, 2, 5, 3, 2, 2, 8, 8, 8, 5, 8, 5, 8, 2, 5, 5, 8, 5, 8, 5, 5, 8, 8, 8, 5, 8, 8, 8, 5, 8, 8, 8, 5, 8, 5, 2, 5, 8, 5, 8, 5, 8, 5, 2, 8, 8, 8, 8, 5, 5, 2, 8, 5, 5, 2, 5, 5, 2, 5, 2, 5, 2, 8, 8, 8, 2, 8, 8, 2, 8, 5, 3, 2, 5, 5, 2, 8, 5, 3, 2, 8, 5, 2, 5, 3, 2, 8, 8, 8, 5, 8, 8, 5},
//                        {0, 4, 0, 0, 0, 0, 1, 1, 2, 5, 0, 1, 1, 1, 0, 1, 2, 5, 5, 5, 0, 2, 5, 5, 2, 5, 5, 2, 5, 5, 5, 2, 5, 4, 1, 4, 1, 4, 4, 4, 4, 2, 0, 2, 5, 2, 5, 0, 2, 0, 0, 1, 0, 2, 5, 5, 1, 8, 4, 5, 7, 5, 7, 4, 5, 7, 4, 4, 4, 1, 2, 0, 1, 1, 1, 1, 1, 2, 5, 1, 5, 5, 5, 5, 2, 5, 5, 2, 5, 5, 5, 2, 5, 5, 5, 2, 5, 2, 5, 2, 5, 5, 0, 2, 2, 2, 2, 8, 5, 5, 5, 5, 5, 2, 8, 2, 5, 2, 2, 5},
//                        {0, 0, 1, 3, 1, 1, 1, 1, 1, 1, 0, 4, 0, 2, 5, 5, 8, 8, 8, 8, 2, 5, 8, 8, 5, 8, 8, 3, 5, 8, 5, 2, 8, 5, 0, 5, 8, 8, 8, 2, 8, 8, 8, 8, 2, 5, 5, 8, 8, 8, 2, 0, 5, 3, 0, 0, 0, 0, 0, 0, 1, 4, 1, 1, 0, 1, 1, 4, 1, 1, 1, 1, 4, 1, 0, 0, 1, 1, 4, 4, 4, 1, 0, 2, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 5, 5, 5, 8, 8, 2, 8, 8, 5, 5, 3, 5, 8, 8, 5, 2, 8, 5, 8, 5, 2, 5, 8, 5},
//                        {1, 4, 0, 0, 0, 0, 0, 0, 1, 1, 1, 4, 1, 1, 1, 0, 0, 1, 0, 0, 4, 1, 1, 1, 1, 0, 0, 0, 4, 1, 0, 0, 4, 1, 1, 1, 1, 0, 0, 0, 1, 4, 1, 0, 0, 0, 0, 0, 4, 1, 1, 0, 0, 1, 4, 4, 1, 4, 0, 2, 8, 0, 1, 1, 1, 1, 0, 7, 0, 0, 2, 5, 2, 5, 5, 5, 8, 5, 5, 8, 5, 5, 5, 5, 2, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 4, 0, 0, 0, 4, 0, 0, 2, 5, 2, 5, 3, 2, 2, 8, 5, 0, 0, 0, 1, 0, 2, 2, 0, 0},
//                        {0, 0, 1, 1, 1, 1, 0, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 4, 4, 1, 0, 0, 0, 0, 0, 0, 4, 1, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 4, 0, 1, 4, 1, 0, 1, 0, 2, 2, 5, 2, 5, 2, 5, 5, 2, 2, 2, 8, 5, 2, 8, 8, 8, 2, 5, 2, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 0, 0, 0, 5, 5, 5, 8, 5, 0, 2, 5, 8, 5, 8, 5, 2, 5, 8, 2, 8, 5, 2, 8, 8, 8, 5, 2, 2, 8, 8, 8, 5, 2, 8, 8},
//                        {0, 0, 2, 5, 2, 5, 2, 2, 5, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 4, 1, 7, 1, 1, 0, 7, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 2, 2, 5, 5, 2, 8, 8, 5, 5, 5, 3, 2, 8, 8, 8, 8, 8, 2, 0, 2, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 5, 2, 3, 2, 0, 2, 5, 2, 5, 3, 2, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 8},
//                        {2, 5, 5, 0, 0, 0, 0, 0, 4, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 8, 1, 4, 4, 2, 0, 0, 0, 4, 0, 4, 0, 2, 8, 5, 5, 5, 5, 5, 5, 8, 3, 2, 1, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 8, 8, 5, 8, 8, 2, 5, 5, 5, 5, 5, 8, 5, 2, 5, 5, 8, 5, 5, 2, 8, 8, 2, 5, 0, 2, 8, 5, 2, 8, 0, 5, 8, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 0, 0, 0, 2, 5, 5, 5, 5, 5, 8, 8, 8, 8, 5, 3, 2, 0, 2, 0, 2, 8, 0, 5, 8},
//                        {2, 2, 5, 2, 5, 2, 2, 2, 2, 5, 5, 0, 0, 2, 5, 5, 1, 1, 1, 1, 1, 1, 0, 2, 2, 5, 5, 3, 2, 8, 8, 8, 5, 5, 8, 8, 2, 3, 2, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 8, 5, 5, 8, 5, 5, 2, 5, 2, 0, 2, 5, 5, 2, 2, 5, 2, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 2, 5, 5, 5, 2, 5, 5, 2, 2, 8, 5, 8, 8, 5, 5, 5, 8, 5, 5, 8, 5, 5, 2, 2, 8, 8, 8, 2, 8, 5, 8, 5, 8, 5, 2, 2, 2, 8, 8, 8},
//                        {2, 0, 2, 2, 5, 5, 2, 0, 0, 0, 0, 3, 0, 3, 2, 5, 5, 5, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 0, 0, 2, 0, 2, 2, 8, 8, 5, 5, 8, 1, 1, 0, 4, 2, 5, 8, 8, 1, 4, 1, 1, 1, 1, 1, 2, 5, 0, 4, 0, 2, 2, 5, 8, 5, 2, 8, 5, 2, 2, 2, 8, 2, 2, 2, 8, 5, 5, 2, 2, 2, 5, 2, 2, 5, 2, 2, 8, 0, 5, 8, 2, 8, 2, 8, 5, 5, 8, 2, 2, 5, 8, 5, 8, 5, 5, 2, 5, 5, 5, 2, 8, 8, 5},
//                        {1, 4, 1, 1, 1, 4, 5, 5, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 1, 0, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 4, 1, 1, 0, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 4, 4, 0, 1, 0, 2, 5, 2, 5, 2, 0, 1, 0, 2, 2, 2, 5, 0, 1, 1, 0, 0, 1, 1, 1, 0, 2, 2, 5, 3, 0, 1, 1, 1, 0, 4, 1, 1, 1, 0, 2, 2, 1, 1, 1, 0, 1, 1, 6, 2, 2, 0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 1, 1, 1, 1, 1, 7, 7, 7, 4, 7},
//                        {2, 0, 0, 2, 2, 5, 5, 5, 2, 3, 0, 1, 5, 1, 1, 1, 5, 1, 2, 2, 2, 2, 0, 4, 1, 4, 0, 0, 4, 1, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 5, 8, 8, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 5, 5, 5, 5, 2, 2, 5, 5, 8, 8, 5, 8, 5, 5, 5, 2, 1, 2, 8, 5, 2, 5, 5, 5, 2, 5, 8, 5, 2, 5, 5, 5, 8, 8, 5, 0, 2, 8, 5, 5, 5, 5, 0, 1, 1, 2, 0, 2, 5, 5, 2, 5, 2, 8, 8, 2, 5, 2, 8, 5, 8, 2, 0, 0, 2, 5},
//                        {0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 0, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 0, 2, 5, 2, 2, 2, 5, 2, 2, 5, 0, 2, 5, 3, 2, 8, 8, 5, 3, 2, 2, 5, 5, 5, 5, 0, 2, 3, 2, 3, 2, 8, 8, 5, 3, 2, 8, 5, 3, 2, 2, 3, 2, 8, 8, 5, 3, 2, 3, 0, 2, 5, 5, 3, 2, 8, 8, 5, 5, 3, 2, 5, 8, 8, 5, 3, 2, 8, 2, 5, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2},
//                        {0, 0, 1, 1, 1, 1, 4, 4, 4, 4, 4, 1, 2, 8, 2, 5, 5, 5, 5, 5, 2, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 2, 3, 2, 8, 8, 5, 8, 5, 8, 8, 8, 1, 7, 7, 7, 7, 8, 8, 8, 5, 5, 8, 8, 8, 8, 5, 5, 1, 1, 1, 7, 4, 4, 2, 2, 2, 7, 7, 7, 8, 8, 8, 6, 7, 7, 7, 7, 6, 7, 8, 8, 8, 7, 7, 7, 8, 8, 2, 5, 2, 5, 5, 5, 3, 2, 5, 3, 3, 3, 3, 0, 5, 8, 8, 5, 5, 8, 5, 8, 8, 8, 8, 2, 2, 8, 5},
//                        {2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 2, 2, 5, 1, 1, 1, 0, 2, 0, 2, 0, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 5, 2, 2, 2, 8, 5, 8, 8, 8, 8, 8, 8, 8, 1, 1, 0, 1, 0, 0, 2, 2, 0, 2, 2, 5, 0, 1, 1, 0, 0, 1, 0, 7, 2, 2, 2, 1, 0, 1, 1, 0, 0, 0, 2, 5, 2, 5, 1, 1, 1, 1, 1, 4, 0, 2, 2, 2, 2, 5, 5, 2, 5, 2, 8, 5, 5, 0, 0, 0, 1, 1, 1, 1, 2, 5, 2, 2},
//                        {0, 0, 2, 5, 0, 0, 2, 5, 5, 2, 5, 5, 2, 0, 0, 1, 1, 1, 1, 1, 1, 4, 1, 1, 5, 5, 5, 5, 8, 5, 5, 5, 2, 2, 8, 5, 8, 5, 5, 5, 5, 8, 2, 5, 5, 3, 2, 2, 2, 5, 5, 2, 8, 5, 5, 8, 8, 2, 5, 8, 5, 5, 3, 2, 5, 8, 5, 8, 5, 8, 8, 8, 8, 5, 8, 8, 5, 8, 5, 5, 5, 5, 5, 2, 8, 2, 5, 2, 5, 2, 5, 8, 8, 5, 5, 5, 5, 8, 8, 8, 2, 2, 8, 8, 8, 8, 5, 0, 2, 5, 5, 2, 5, 2, 5, 2, 2, 2, 2, 5},
//                        {0, 0, 0, 2, 5, 5, 0, 0, 2, 5, 5, 5, 5, 2, 2, 2, 5, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 2, 5, 2, 2, 2, 2, 5, 8, 2, 5, 5, 2, 5, 8, 2, 5, 2, 5, 5, 2, 5, 5, 8, 2, 5, 5, 5, 5, 8, 2, 5, 5, 2, 5, 8, 2, 8, 2, 5, 2, 2, 2, 2, 8, 5, 2, 5, 2, 2, 5, 5, 5, 5, 8, 8, 5, 5, 5, 5, 2, 2, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 2, 2, 5, 5, 8, 5, 5, 2, 5, 5, 5, 5, 8, 8, 5, 5, 5, 5, 2, 5, 2},
//                        {2, 5, 2, 5, 8, 5, 5, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 5, 2, 5, 0, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 0, 2, 5, 3, 5, 5, 3, 2, 2, 5, 5, 5, 8, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 5, 5, 5, 5, 5, 3, 2, 5, 8, 5, 3, 0, 0, 2, 5, 2, 8, 5, 8, 5, 2, 5, 8, 8, 8, 8, 8, 5, 8, 8, 8, 5, 8, 5, 5, 2, 8, 8, 8, 8, 8, 2, 5, 5, 2, 2, 8, 3, 5, 5, 2, 5, 8, 5, 5},
//                        {2, 5, 2, 8, 2, 0, 0, 0, 0, 0, 0, 2, 0, 4, 1, 0, 4, 0, 4, 1, 1, 4, 0, 4, 0, 4, 0, 0, 0, 2, 5, 5, 5, 2, 2, 5, 2, 0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 8, 0, 0, 0, 2, 0, 0, 2, 0, 2, 8, 0, 2, 0, 0, 2, 0, 2, 8, 0, 2, 0, 2, 0, 2, 5, 0, 0, 2, 5, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 5, 5, 2, 2, 5, 0, 0, 4, 1, 4, 1, 1, 1, 0, 0, 0, 0, 0, 4, 1, 1, 0, 0},
//                        {2, 0, 0, 2, 2, 5, 2, 2, 5, 2, 5, 2, 5, 5, 5, 2, 5, 5, 5, 8, 5, 5, 8, 5, 5, 8, 0, 2, 5, 0, 2, 5, 5, 5, 2, 5, 0, 0, 0, 0, 0, 2, 2, 5, 0, 2, 2, 5, 5, 8, 5, 2, 5, 5, 2, 5, 5, 2, 8, 8, 2, 2, 5, 2, 6, 2, 8, 5, 5, 3, 5, 8, 8, 2, 8, 3, 5, 2, 2, 0, 5, 8, 8, 2, 5, 5, 5, 2, 8, 8, 2, 8, 8, 8, 5, 8, 5, 5, 5, 5, 8, 2, 0, 0, 0, 2, 8, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 5, 5},
//                        {0, 0, 0, 0, 2, 0, 2, 2, 8, 2, 0, 2, 2, 5, 2, 2, 2, 0, 2, 8, 5, 5, 2, 8, 5, 5, 2, 2, 8, 8, 5, 0, 2, 2, 0, 2, 0, 0, 2, 2, 5, 2, 8, 8, 5, 2, 2, 5, 8, 8, 8, 5, 2, 5, 8, 8, 8, 5, 8, 5, 2, 2, 8, 8, 5, 8, 5, 8, 8, 5, 5, 5, 5, 8, 2, 2, 2, 5, 8, 5, 5, 8, 8, 5, 5, 5, 5, 5, 8, 5, 5, 8, 8, 5, 5, 2, 8, 8, 5, 8, 5, 5, 8, 8, 8, 5, 5, 2, 2, 2, 8, 5, 5, 2, 2, 8, 8, 8, 5, 2},
//                        {2, 2, 2, 5, 5, 8, 5, 5, 5, 5, 5, 5, 8, 0, 0, 0, 0, 2, 2, 5, 5, 2, 2, 0, 5, 2, 5, 2, 5, 5, 2, 5, 5, 5, 2, 2, 2, 5, 0, 2, 5, 5, 2, 2, 5, 0, 4, 0, 4, 1, 1, 1, 4, 1, 2, 5, 5, 5, 5, 5, 5, 5, 2, 5, 2, 5, 2, 2, 5, 5, 2, 5, 5, 0, 2, 2, 0, 0, 0, 5, 5, 5, 2, 8, 2, 8, 5, 0, 1, 1, 4, 1, 1, 1, 1, 1, 2, 5, 1, 1, 0, 5, 5, 8, 5, 5, 2, 8, 8, 8, 8, 2, 5, 5, 8, 5, 2, 8, 5, 5},
//                        {0, 0, 0, 0, 4, 0, 0, 2, 2, 2, 2, 2, 3, 2, 5, 5, 2, 2, 5, 3, 0, 2, 8, 5, 5, 4, 7, 7, 7, 4, 7, 4, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 2, 2, 2, 5, 5, 8, 5, 8, 8, 8, 8, 2, 3, 0, 0, 1, 4, 4, 7, 4, 4, 4, 7, 7, 4, 7, 7, 7, 4, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 2},
//                        {0, 0, 2, 2, 2, 0, 2, 2, 5, 2, 2, 5, 3, 2, 8, 5, 5, 5, 5, 5, 5, 8, 5, 2, 8, 8, 2, 5, 2, 2, 2, 5, 5, 2, 5, 2, 8, 5, 2, 5, 5, 5, 8, 8, 5, 5, 2, 2, 5, 2, 5, 3, 0, 2, 5, 3, 0, 0, 0, 0, 2, 8, 5, 2, 5, 5, 5, 8, 5, 5, 2, 8, 8, 8, 2, 5, 0, 0, 2, 2, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 8, 8, 3, 1},
//                        {2, 2, 5, 5, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 2, 0, 0, 4, 1, 1, 0, 4, 1, 1, 7, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 2, 5, 5, 5, 8, 5, 8, 5, 5, 5, 5, 5, 5, 8, 5, 8, 2, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 5, 5, 8, 5, 5, 5, 8, 8, 3, 2, 5, 5, 8, 2, 8, 8, 8, 5, 8, 8, 5, 8, 8, 8, 8, 8, 8, 0, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 5, 5, 5, 5, 5, 2, 2},
//                        {2, 0, 0, 2, 5, 5, 5, 2, 2, 0, 0, 2, 5, 5, 2, 5, 5, 2, 2, 5, 5, 0, 2, 5, 1, 1, 1, 0, 1, 4, 2, 5, 5, 5, 5, 2, 0, 2, 2, 2, 2, 3, 2, 0, 0, 1, 4, 2, 0, 2, 8, 5, 2, 2, 2, 8, 5, 0, 2, 5, 5, 5, 5, 2, 5, 5, 2, 0, 4, 0, 2, 0, 0, 0, 1, 4, 4, 4, 4, 1, 1, 1, 4, 1, 4, 1, 1, 0, 1, 4, 1, 1, 2, 0, 1, 1, 1, 4, 1, 1, 2, 8, 5, 5, 5, 2, 5, 2, 5, 8, 8, 5, 8, 5, 5, 2, 8, 8, 5, 2},
//                        {2, 1, 5, 5, 1, 1, 4, 0, 0, 0, 0, 2, 5, 5, 5, 5, 0, 0, 2, 2, 8, 5, 5, 5, 1, 5, 8, 8, 8, 8, 8, 2, 5, 3, 1, 2, 0, 5, 8, 8, 2, 0, 0, 2, 5, 5, 5, 5, 8, 5, 8, 5, 8, 8, 5, 8, 5, 8, 2, 5, 5, 5, 5, 5, 3, 2, 2, 8, 8, 8, 8, 0, 5, 5, 8, 8, 2, 0, 5, 1, 4, 4, 1, 0, 5, 8, 0, 0, 0, 0, 2, 5, 5, 5, 8, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 5, 8, 8, 8, 8, 8, 5, 8, 8, 8},
//                        {0, 0, 1, 4, 2, 4, 1, 5, 5, 2, 2, 0, 4, 1, 1, 1, 1, 0, 4, 1, 1, 3, 0, 7, 1, 1, 2, 2, 5, 1, 2, 0, 2, 0, 0, 2, 0, 5, 2, 5, 5, 0, 0, 2, 5, 2, 5, 2, 5, 5, 2, 2, 0, 2, 2, 6, 2, 2, 2, 5, 5, 5, 2, 2, 2, 0, 4, 3, 0, 0, 5, 2, 0, 2, 5, 8, 2, 2, 8, 5, 5, 5, 8, 2, 8, 8, 8, 5, 5, 2, 6, 2, 8, 2, 8, 8, 8, 8, 5, 5, 5, 8, 8, 8, 8, 8, 5, 8, 8, 8, 8, 5, 8, 8, 8, 2, 2, 1, 2, 2},
//                        {2, 8, 5, 2, 0, 2, 0, 2, 5, 5, 5, 5, 0, 2, 0, 4, 1, 1, 2, 1, 1, 1, 2, 5, 2, 5, 5, 2, 5, 5, 1, 1, 2, 2, 2, 2, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 2, 5, 5, 1, 1, 4, 4, 4, 2, 2, 5, 0, 1, 1, 2, 1, 1, 2, 2, 5, 5, 2, 1, 1, 4, 4, 4, 2, 2, 8, 8, 8, 8, 8, 5, 5, 8, 8, 8, 8, 8, 8, 5, 5, 2, 5, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7, 1, 7, 7, 7, 7, 7, 7, 7, 7, 2, 8},
//                        {2, 5, 5, 2, 2, 8, 5, 2, 5, 2, 5, 5, 2, 5, 2, 5, 2, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 2, 2, 5, 2, 2, 5, 5, 5, 0, 0, 2, 5, 5, 2, 2, 2, 2, 5, 2, 2, 5, 5, 5, 2, 3, 2, 2, 8, 2, 8, 5, 5, 2, 8, 5, 0, 5, 8, 8, 0, 2, 0, 2, 3, 5, 2, 5, 8, 8, 8, 5, 8, 8, 8, 2, 8, 5, 5, 8, 5, 8, 8, 5, 5, 4, 7, 7, 5, 4, 7, 7, 7, 7, 4, 7, 4, 4, 7, 4, 7, 7, 7, 4, 4, 7, 7, 2, 5, 8, 5, 8, 0, 2},
//                        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 2, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 5, 5, 0, 0, 0, 0, 2, 5, 5, 5, 8, 8, 8, 5, 5, 8, 5, 8, 5, 5, 5, 8, 5, 8, 5, 5, 5, 2, 2, 8, 2, 5, 5, 5, 2, 5, 5, 5, 5, 5, 2, 2, 5, 2, 5, 2, 2, 8, 2, 8, 5, 2, 2, 2, 5, 2, 5, 5, 5, 8, 5, 2, 5, 8, 5, 5, 2, 2, 5, 8, 8, 5, 0, 2, 5, 5, 2, 5, 5, 5, 5, 5, 8, 8, 5},
//                        {2, 8, 8, 8, 0, 0, 2, 2, 2, 8, 5, 5, 0, 4, 2, 2, 5, 2, 5, 2, 2, 0, 4, 1, 4, 1, 4, 2, 5, 5, 2, 1, 4, 5, 5, 5, 5, 5, 5, 5, 0, 4, 2, 8, 5, 5, 5, 5, 2, 5, 2, 5, 5, 8, 2, 5, 5, 5, 8, 5, 5, 5, 2, 5, 5, 3, 2, 2, 8, 0, 0, 2, 0, 2, 2, 2, 5, 5, 5, 2, 5, 2, 1, 2, 2, 5, 2, 5, 5, 5, 2, 2, 5, 5, 5, 5, 0, 2, 0, 0, 2, 5, 2, 0, 2, 5, 5, 8, 0, 2, 5, 5, 2, 2, 5, 2, 2, 5, 5, 5},
//                        {0, 0, 0, 0, 2, 5, 5, 2, 5, 5, 2, 5, 5, 2, 5, 2, 5, 5, 0, 2, 5, 0, 4, 1, 4, 4, 1, 1, 4, 4, 1, 0, 4, 1, 0, 4, 0, 4, 1, 4, 1, 4, 1, 3, 0, 0, 1, 4, 4, 4, 4, 1, 4, 1, 4, 1, 0, 1, 3, 4, 4, 3, 4, 3, 4, 4, 4, 4, 4, 4, 1, 0, 2, 2, 1, 1, 4, 1, 4, 4, 1, 4, 4, 4, 1, 3, 4, 4, 0, 0, 0, 1, 4, 3, 1, 0, 2, 2, 2, 5, 5, 5, 2, 5, 5, 2, 2, 2, 2, 5, 2, 2, 5, 2, 2, 5, 2, 5, 2, 5},
//                        {0, 0, 2, 5, 2, 5, 2, 2, 5, 5, 8, 8, 8, 5, 8, 5, 5, 5, 2, 0, 0, 0, 0, 2, 5, 5, 5, 5, 5, 5, 2, 5, 2, 5, 5, 5, 5, 2, 5, 2, 2, 2, 5, 2, 2, 5, 2, 5, 2, 2, 2, 2, 2, 2, 5, 8, 5, 5, 5, 5, 5, 8, 5, 2, 5, 5, 5, 2, 2, 2, 2, 8, 5, 5, 5, 8, 8, 5, 5, 8, 5, 5, 2, 5, 5, 0, 2, 8, 5, 0, 2, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 5, 5, 5, 5, 2, 2, 2, 5, 2, 5, 5, 5, 5, 5, 8, 5},
//                        {1, 1, 1, 4, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 4, 1, 1, 1, 0, 2, 5, 5, 5, 2, 3, 0, 5, 8, 0, 0, 0, 2, 5, 5, 0, 0, 0, 2, 3, 2, 8, 5, 5, 5, 8, 8, 8, 8, 8, 8, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 5, 5, 2, 2, 0, 2, 8, 2, 8, 8, 8, 8, 5, 8, 8, 8, 0, 0, 1, 1, 1, 4, 1, 1, 4, 1, 1, 4, 4, 4, 1, 1, 4, 1, 1, 4, 4, 1, 1, 0, 3, 0, 0, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 8, 0, 0},
//                        {0, 0, 2, 1, 1, 4, 1, 5, 0, 0, 0, 0, 1, 1, 0, 2, 2, 5, 2, 5, 5, 5, 5, 2, 5, 2, 2, 0, 2, 5, 5, 0, 2, 0, 2, 5, 5, 8, 2, 8, 8, 5, 8, 8, 5, 2, 8, 5, 8, 8, 8, 8, 5, 5, 0, 2, 8, 8, 8, 8, 8, 5, 5, 0, 0, 0, 0, 0, 1, 4, 5, 2, 5, 2, 5, 2, 2, 8, 8, 5, 8, 5, 5, 5, 5, 8, 8, 8, 5, 2, 5, 8, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 5, 5, 5, 5, 5, 5},
//                        {1, 4, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 3, 0, 0, 0, 2, 8, 5, 5, 5, 8, 5, 5, 8, 8, 8, 5, 8, 5, 5, 1, 4, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 4, 1, 1, 0, 2, 8, 2, 8, 1, 1, 4, 4, 4, 4, 4, 4, 0, 4, 1, 4, 1, 1, 1, 0, 1, 4, 1, 1, 0, 1, 4, 1, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 1, 4, 1, 1, 1, 1, 1, 1, 0, 2, 5, 5, 5, 2, 5, 2, 5, 2, 5, 8, 8, 8, 5, 8, 8, 5, 8, 5, 8},
//                        {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 5, 5, 2, 2, 5, 8, 2, 5, 8, 5, 2, 2, 2, 5, 5, 8, 5, 5, 8, 2, 3, 2, 5, 5, 5, 5, 8, 8, 3, 0, 0, 2, 2, 5, 3, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 8, 8, 8, 2, 8, 8, 8, 5, 5, 3, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 8, 8, 8, 8, 8, 8, 8, 5, 8, 4, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 5, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7},
//                        {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 2, 1, 4, 1, 1, 4, 4, 1, 1, 4, 4, 4, 1, 4, 4, 4, 4, 1, 3, 4, 0, 2, 5, 5, 5, 5, 2, 5, 2, 5, 3, 1, 1, 1, 1, 4, 1, 2, 2, 5, 8, 2, 2, 8, 5, 5, 8, 5, 2, 8, 8, 5, 1, 0, 4, 2, 4, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 5, 8, 4, 2, 5, 5, 2, 5, 2, 5, 2, 2, 8, 2, 8, 5, 8, 0, 0, 2, 8, 8, 8, 8, 8, 5, 8, 8, 8},
//                        {0, 0, 2, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 0, 1, 0, 4, 2, 1, 4, 1, 4, 1, 4, 1, 1, 1, 1, 4, 1, 1, 0, 4, 0, 0, 0, 2, 8, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 5, 5, 5, 0, 2, 8, 8, 8, 5, 8, 8, 2, 8, 8, 8, 5, 8, 8, 8, 5, 2, 8, 2, 8, 8, 8, 5, 8, 8, 8, 8, 5, 8, 5},
//                        {0, 0, 2, 2, 2, 2, 2, 2, 5, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 4, 4, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 1, 1, 1, 1, 4, 4, 1, 4, 1, 1, 4, 1, 4, 0, 1, 1, 1, 3, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 7, 0, 2, 5, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 5, 3, 0, 0, 5, 0, 2, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
//                        {0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 0, 2, 2, 0, 2, 3, 0, 3, 2, 8, 2, 2, 2, 8, 8, 5, 3, 0, 2, 2, 0, 2, 2, 5, 5, 0, 0, 0, 0, 5, 8, 5, 5, 3, 3, 3, 3, 2, 2, 5, 2, 2, 0, 0, 2, 0, 2, 5, 2, 8, 8, 5, 5, 8, 8, 0, 0, 2, 8, 0, 2, 5, 0, 6, 2, 8, 8, 5, 5, 8, 5, 8, 8, 8, 5, 8, 8, 8, 5, 0, 4, 0, 2, 8, 8, 2, 5, 8, 5, 8, 5, 8, 8, 8, 0},
//                        {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 1, 4, 1, 1, 4, 1, 4, 4, 1, 4, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 0, 0, 0, 2, 8, 0, 0, 5, 8, 5, 8, 8, 8, 8, 2, 2, 2, 2, 2, 8, 8, 8, 2, 2, 5, 2, 0, 2, 8, 8, 8, 8, 2, 5, 5, 2, 5, 2, 8, 8, 8, 0, 0, 0, 5, 8, 8, 8, 8, 8, 8, 8, 5, 5, 2, 5, 8, 2, 8, 8, 8, 5, 8, 5, 5, 5, 0, 5, 8, 8, 8, 8, 0, 0, 2, 5, 8, 8, 2, 2, 2, 8},
//                        {0, 0, 1, 0, 3, 4, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 0, 1, 4, 4, 1, 1, 4, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 0, 2, 8, 5, 5, 8, 8, 2, 8, 3, 5, 8, 2, 5, 2, 5, 5, 2, 2, 5, 8, 8, 3, 5, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 2, 5, 8, 8, 3, 8, 8, 8, 5, 8, 8, 2, 2, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1},
//                        {0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 5, 5, 5, 5, 8, 8, 5, 8, 2, 2, 5, 5, 8, 5, 8, 5, 5, 2, 8, 2, 0, 5, 8, 2, 2, 0, 5, 8, 2, 2, 8, 5, 5, 2, 2, 5, 5, 2, 1, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 8, 5, 5, 5, 5, 8, 8, 2, 5, 5, 8, 8, 5, 0, 2, 8, 8, 5, 5, 2, 5, 2, 2, 2, 2, 2, 0, 2, 8, 8, 2, 2, 2, 8, 5, 5, 5, 5, 5, 5, 5, 5, 8, 5, 5, 8, 8, 5, 8, 8, 8, 8, 8, 5, 8, 8, 5, 2},
//                        {0, 3, 0, 0, 0, 0, 3, 0, 2, 2, 1, 1, 1, 0, 4, 1, 1, 1, 1, 4, 4, 4, 0, 0, 0, 0, 2, 8, 8, 8, 5, 0, 2, 8, 8, 8, 8, 8, 8, 8, 8, 5, 8, 8, 8, 5, 8, 8, 5, 8, 8, 8, 5, 8, 8, 5, 8, 8, 8, 2, 8, 8, 8, 8, 5, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 5, 5, 5, 2, 5, 2, 8, 2, 8, 8, 2, 8, 5, 8, 5, 8, 8, 2, 5, 8, 2, 5, 5, 2, 5, 5, 8, 5, 8, 5, 8, 5, 5, 5, 5, 2, 5, 8, 5, 5, 8, 5, 5, 5},
//                        {0, 0, 0, 0, 1, 1, 1, 4, 1, 1, 1, 1, 1, 0, 4, 0, 1, 1, 0, 4, 1, 1, 3, 0, 0, 0, 0, 1, 1, 1, 3, 0, 2, 3, 2, 2, 8, 8, 5, 5, 5, 8, 2, 3, 1, 2, 5, 3, 5, 8, 0, 0, 0, 0, 2, 2, 8, 8, 5, 8, 2, 5, 0, 2, 8, 8, 2, 8, 5, 3, 0, 5, 5, 5, 0, 2, 8, 5, 2, 2, 5, 3, 2, 2, 5, 5, 8, 2, 3, 0, 2, 0, 0, 1, 0, 1, 3, 2, 2, 2, 8, 5, 2, 8, 2, 5, 8, 5, 3, 2, 5, 8, 0, 5, 8, 5, 1, 4, 0, 0},
//                        {2, 8, 0, 4, 1, 4, 4, 1, 4, 4, 0, 4, 1, 1, 1, 1, 1, 1, 4, 4, 1, 4, 4, 1, 0, 2, 5, 5, 5, 2, 5, 0, 0, 0, 2, 5, 8, 5, 5, 8, 2, 5, 5, 8, 5, 8, 8, 0, 0, 2, 5, 8, 2, 2, 8, 5, 5, 2, 8, 2, 3, 5, 8, 8, 2, 2, 5, 5, 8, 8, 5, 2, 2, 8, 5, 8, 0, 2, 0, 0, 0, 5, 2, 5, 1, 1, 0, 2, 5, 2, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 5, 8, 8, 8, 8, 5, 5, 8, 2, 2, 8, 8, 5, 5, 5, 2, 8, 8, 5},
//                        {0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 1, 4, 4, 4, 1, 1, 1, 4, 0, 1, 4, 1, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 1, 1, 1, 1, 4, 2, 8, 5, 5, 2, 2, 5, 5, 5, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 2, 5, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1},
//                        {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 4, 3, 2, 2, 2, 2, 2, 5, 5, 2, 8, 8, 2, 2, 5, 2, 8, 8, 5, 0, 2, 8, 0, 2, 0, 2, 1, 0, 2, 6, 6, 2, 5, 2, 2, 0, 0, 2, 8, 5, 0, 2, 5, 3, 0, 0, 2, 5, 8, 8, 5, 5, 3, 2, 8, 8, 0, 5, 8, 5, 2, 3, 2, 8, 8, 8, 8, 8, 8, 8, 8, 5, 8, 5, 8, 5, 3, 0, 5, 5, 3, 2, 0, 5, 8, 5, 3, 5, 2, 0, 5, 5, 2, 3, 2, 8, 8, 8, 8, 8, 8, 8, 5},
//                        {0, 0, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 5, 5, 3, 2, 5, 8, 5, 0, 5, 0, 0, 2, 0, 2, 0, 5, 5, 8, 5, 5, 8, 8, 8, 8, 2, 8, 5, 8, 2, 8, 5, 5, 2, 2, 5, 5, 5, 2, 5, 5, 2, 2, 5, 5, 2, 5, 5, 2, 2, 8, 2, 2, 0, 1, 7, 4, 1, 4, 4, 7, 1, 1, 4, 4, 1, 1, 4, 1, 0, 2, 2, 2, 2, 2, 0, 5, 8, 8, 2, 2, 0, 0, 1, 1, 0, 0, 2, 2, 5, 2, 2, 5, 2, 2, 8},
//                        {0, 0, 0, 1, 1, 1, 1, 1, 2, 5, 5, 2, 5, 2, 0, 1, 2, 3, 2, 5, 5, 2, 8, 8, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 8, 8, 8, 8, 8, 0, 4, 1, 4, 4, 4, 4, 1, 4, 3, 4, 1, 5, 8, 8, 8, 8, 8, 5, 5, 5, 8, 8, 5, 8, 8, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 8, 8, 8, 5, 8, 8, 8, 8, 8, 8, 5, 8, 3, 1, 0, 0, 0, 3, 0, 0, 2, 8, 5, 8, 8, 5, 5, 5, 5, 8, 8, 2, 8, 5, 3, 0, 1, 4, 4, 4, 4, 0},
//                        {0, 0, 0, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 5, 0, 0, 0, 0, 2, 2, 5, 0, 0, 0, 0, 0, 5, 2, 0, 2, 8, 5, 5, 0, 2, 3, 0, 2, 5, 5, 3, 5, 2, 5, 3, 0, 2, 8, 8, 2, 1, 4, 1, 1, 4, 0, 0, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 2, 0, 2, 5, 2, 5, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 2, 2, 5, 5, 2, 2, 2, 2, 5, 0},
//                        {0, 0, 0, 0, 0, 3, 0, 0, 1, 1, 4, 1, 0, 0, 3, 3, 0, 2, 1, 4, 4, 1, 4, 4, 1, 0, 1, 1, 0, 1, 1, 1, 4, 1, 1, 4, 1, 1, 0, 2, 2, 2, 8, 8, 2, 8, 2, 8, 5, 5, 5, 8, 8, 2, 5, 5, 5, 5, 8, 5, 5, 2, 2, 2, 2, 2, 8, 2, 5, 8, 5, 5, 8, 8, 8, 5, 8, 5, 8, 5, 8, 8, 5, 8, 5, 5, 5, 2, 5, 5, 2, 5, 2, 5, 2, 8, 8, 8, 8, 8, 2, 8, 8, 8, 2, 5, 5, 5, 8, 2, 5, 8, 5, 3, 5, 2, 5, 2, 5, 8},
//                        {2, 5, 5, 8, 5, 2, 5, 2, 2, 5, 8, 2, 5, 5, 5, 5, 2, 5, 5, 2, 8, 8, 5, 5, 5, 5, 8, 5, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 1, 4, 1, 4, 4, 1, 2, 8, 5, 5, 5, 5, 5, 2, 8, 8, 8, 2, 5, 5, 8, 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 4, 4, 4, 4, 3, 0, 0, 2, 2, 5, 2, 5, 5, 5, 2, 2, 3, 5, 2, 0, 2, 8, 2, 5, 4, 4, 7, 7, 7, 4, 7, 7, 7, 7, 7, 4, 7, 5, 2, 5, 5, 5, 2, 8, 8, 5, 2, 5, 5},
//                        {0, 4, 0, 0, 1, 1, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 5, 8, 2, 5, 2, 2, 5, 5, 5, 2, 5, 2, 0, 0, 0, 0, 0, 4, 0, 0, 2, 2, 8, 5, 2, 5, 5, 8, 5, 5, 5, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 8, 2, 5, 2, 2, 2, 2, 5, 2, 5, 8, 2, 5, 2, 5, 5, 5, 2, 2, 5, 5, 2, 2, 5, 5, 8, 2, 8, 5, 8, 2, 2, 5, 5, 2, 5, 2, 2, 2, 5, 5, 5, 2, 2, 5, 5, 2, 5, 2, 5, 8, 5},
//                        {2, 2, 5, 2, 5, 5, 1, 1, 1, 4, 4, 1, 4, 1, 1, 1, 2, 8, 5, 5, 8, 5, 8, 5, 8, 5, 5, 5, 5, 5, 5, 5, 8, 5, 2, 8, 5, 5, 5, 5, 5, 2, 5, 8, 5, 5, 5, 2, 8, 8, 5, 5, 8, 5, 5, 2, 5, 5, 2, 5, 2, 5, 0, 2, 8, 0, 2, 5, 5, 5, 2, 5, 0, 4, 1, 1, 3, 4, 0, 0, 0, 2, 5, 5, 5, 2, 2, 2, 5, 5, 5, 5, 5, 2, 5, 8, 5, 5, 8, 5, 5, 8, 8, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 2, 8, 2, 5, 5},
//                        {0, 0, 1, 5, 5, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 8, 8, 8, 8, 8, 6, 6, 8, 1, 0, 0, 1, 1, 4, 1, 2, 4, 8, 8, 1, 1, 1, 1, 2, 4, 1, 0, 2, 5, 5, 5, 8, 5, 5, 2, 8, 5, 0, 0, 0, 1, 4, 1, 4, 1, 0, 1, 4, 3, 0, 1, 1, 4, 1, 1, 2, 5, 2, 5, 5, 5, 2, 5, 2, 5, 5, 5, 2, 5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5},
//                        {0, 0, 2, 2, 5, 2, 5, 2, 2, 2, 5, 0, 0, 4, 1, 2, 4, 8, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 0, 2, 8, 8, 2, 5, 8, 5, 5, 8, 2, 0, 0, 0, 0, 0, 4, 0, 4, 3, 0, 0, 0, 0, 1, 4, 0, 2, 0, 2, 1, 1, 1, 1, 1, 1, 4, 1, 2, 2, 5, 5, 5, 2, 5, 2, 2, 5, 2, 5, 2, 2, 5, 3, 0, 5, 2, 8, 8, 8, 8, 8, 8, 5, 8, 8, 8, 8, 8, 8, 8, 8, 5, 8, 8, 2, 8, 8, 2, 5, 2, 8, 5, 2, 8, 8, 8, 8, 2, 8, 8},
//                        {0, 0, 0, 2, 8, 5, 8, 2, 2, 8, 8, 5, 3, 0, 0, 2, 2, 8, 8, 5, 5, 8, 0, 0, 0, 2, 5, 8, 5, 8, 5, 3, 0, 0, 2, 5, 8, 8, 2, 8, 8, 5, 3, 2, 8, 5, 3, 0, 2, 8, 2, 3, 2, 0, 5, 5, 8, 8, 8, 5, 2, 3, 2, 3, 2, 3, 2, 8, 3, 0, 5, 0, 2, 0, 2, 3, 2, 3, 2, 3, 2, 3, 2, 8, 5, 3, 2, 3, 2, 5, 3, 0, 5, 2, 8, 3, 2, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 2, 3, 0, 2, 8, 2, 5, 3, 2, 0, 2, 5, 0},
//                        {0, 0, 2, 2, 2, 5, 2, 0, 0, 2, 2, 2, 0, 4, 1, 1, 1, 1, 1, 1, 4, 0, 4, 0, 0, 4, 0, 0, 0, 0, 1, 4, 4, 1, 4, 4, 4, 1, 1, 1, 0, 0, 0, 3, 2, 5, 8, 5, 5, 2, 5, 2, 3, 2, 8, 5, 2, 0, 4, 0, 4, 1, 4, 4, 1, 0, 4, 1, 0, 4, 0, 3, 1, 4, 4, 4, 4, 1, 1, 0, 4, 1, 1, 4, 4, 0, 2, 1, 1, 1, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
//                        {2, 0, 3, 2, 2, 0, 2, 2, 5, 5, 3, 2, 8, 8, 5, 5, 3, 2, 8, 5, 5, 3, 5, 8, 5, 5, 8, 5, 8, 5, 5, 3, 5, 8, 8, 5, 2, 8, 5, 5, 8, 8, 8, 5, 8, 8, 5, 0, 0, 1, 1, 1, 1, 4, 4, 1, 1, 4, 1, 5, 5, 5, 3, 3, 0, 2, 5, 5, 8, 8, 5, 8, 8, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 3, 0, 3, 0, 0, 2, 8, 8, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 2, 8, 5, 8, 5, 3, 2, 8},
//                        {0, 0, 0, 0, 2, 0, 0, 4, 1, 1, 0, 4, 0, 4, 0, 0, 2, 5, 0, 0, 2, 1, 1, 2, 4, 5, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 2, 5, 1, 2, 5, 2, 5, 2, 5, 2, 5, 2, 2, 2, 5, 2, 2, 5, 2, 5, 2, 5, 1, 1, 4, 1, 1, 5, 5, 5, 2, 5, 5, 2, 5, 5, 2, 5, 5, 5, 2, 5, 2, 5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 2, 2, 5, 5, 2, 5, 5, 5, 5, 5, 2, 5, 5, 5, 2, 2, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5},
//                        {0, 0, 0, 0, 2, 5, 5, 5, 2, 0, 2, 2, 0, 0, 0, 2, 5, 2, 2, 2, 2, 2, 2, 5, 2, 2, 0, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 8, 5, 5, 2, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 8, 8, 8, 8, 2, 5, 5, 2, 8, 8, 0, 0, 5, 2, 5, 2, 2, 5, 2, 5, 5, 5, 5, 2, 5, 8, 5, 2, 2, 5, 5, 2, 5, 5, 8, 5, 0, 2, 5, 3, 2, 2, 8, 8, 5, 5, 2, 8, 5, 2, 8, 8, 5, 2, 5, 2, 3, 2, 5, 5, 5, 8},
//                        {0, 0, 2, 5, 5, 5, 2, 2, 2, 2, 5, 0, 2, 5, 5, 2, 1, 1, 1, 1, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 8, 0, 0, 2, 5, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 0, 2, 8, 8, 0, 2, 5, 0, 2, 8, 2, 2, 5, 2, 8, 8, 8, 8, 5, 2, 8, 8, 8, 5, 8, 8, 5, 2, 5, 2, 0, 0, 2, 5, 0, 2, 8, 2, 2, 8, 2, 8, 5, 8, 5, 5, 2, 5, 5, 2, 2, 5, 8, 8, 8, 5, 2, 5, 5, 5, 8, 2, 5, 5, 8, 8, 5},
//                        {0, 0, 2, 5, 5, 5, 2, 5, 2, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 1, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 1, 5, 7, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 5, 2, 2, 2, 2, 0, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 1, 7, 5, 8, 8, 2, 8, 8, 8, 5, 8, 1, 7, 7, 7, 7, 7, 7, 7, 5, 5, 1, 7, 4, 7, 7, 7, 4, 7, 7, 5, 5, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 8, 7},
//                        {2, 0, 2, 0, 2, 2, 0, 2, 1, 1, 1, 1, 1, 4, 2, 2, 0, 5, 5, 0, 5, 2, 2, 3, 2, 5, 2, 5, 5, 2, 5, 0, 5, 2, 2, 2, 0, 2, 2, 2, 5, 5, 5, 2, 8, 8, 8, 5, 0, 2, 5, 5, 5, 8, 5, 2, 0, 2, 2, 8, 8, 5, 5, 0, 2, 5, 5, 2, 5, 2, 0, 2, 0, 2, 2, 2, 5, 0, 5, 5, 5, 5, 2, 2, 5, 8, 5, 0, 5, 8, 5, 5, 5, 2, 8, 8, 5, 2, 5, 0, 5, 2, 8, 0, 0, 0, 0, 2, 0, 0, 2, 0, 2, 2, 5, 2, 8, 5, 5, 5},
//                        {0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 5, 5, 5, 8, 2, 5, 5, 2, 5, 5, 5, 2, 2, 0, 4, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 3, 0, 0, 1, 1, 3, 3, 0, 0, 1, 2, 5, 5, 2, 5, 5, 5, 5, 2, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//                        {2, 5, 2, 2, 5, 5, 2, 5, 8, 5, 5, 5, 5, 8, 5, 5, 5, 5, 8, 5, 2, 5, 5, 2, 5, 5, 5, 0, 2, 2, 8, 2, 5, 2, 5, 0, 0, 2, 5, 5, 0, 2, 0, 2, 2, 2, 2, 5, 2, 2, 5, 8, 3, 2, 5, 8, 2, 5, 2, 5, 2, 8, 5, 8, 8, 8, 2, 5, 8, 5, 2, 8, 8, 2, 5, 0, 2, 5, 0, 2, 2, 2, 5, 5, 8, 0, 2, 8, 5, 8, 2, 8, 2, 8, 8, 8, 6, 8, 6, 7, 6, 8, 8, 8, 8, 8, 5, 5, 2, 8, 8, 0, 5, 8, 8, 2, 8, 0, 2, 0},
//                        {2, 2, 2, 1, 1, 4, 4, 4, 4, 2, 8, 5, 8, 8, 8, 8, 8, 8, 5, 5, 8, 8, 8, 8, 8, 5, 8, 2, 8, 4, 1, 4, 7, 5, 5, 5, 7, 5, 8, 5, 7, 7, 7, 7, 5, 5, 8, 5, 5, 5, 5, 8, 4, 4, 7, 7, 5, 8, 8, 8, 5, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7},
//                        {0, 0, 0, 0, 0, 0, 2, 2, 5, 2, 8, 8, 5, 5, 5, 2, 5, 8, 5, 5, 5, 5, 5, 5, 5, 3, 2, 5, 2, 5, 0, 2, 2, 2, 2, 2, 2, 0, 2, 5, 5, 2, 5, 5, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 8, 2, 2, 5, 5, 5, 8, 6, 2, 5, 2, 5, 5, 5, 5, 0, 2, 3, 2, 2, 0, 2, 5, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 8, 8, 5, 8, 5, 5, 5, 8, 5},
//                        {0, 0, 2, 2, 5, 5, 5, 5, 2, 2, 0, 2, 8, 0, 6, 4, 2, 5, 8, 8, 8, 5, 5, 2, 2, 5, 2, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 5, 5, 8, 2, 7, 7, 7, 7, 7, 7, 7, 7, 2, 8, 8, 2, 2, 0, 2, 3, 2, 2, 8, 5, 2, 5, 0, 1, 4, 4, 0, 0, 0, 1, 4, 5, 8, 8, 8, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 2, 7, 5, 5, 5, 5, 2, 8, 5, 2, 2, 5, 5, 2, 2, 2, 0, 5, 8, 2, 5, 5, 2, 8, 5, 8, 5},
//                        {0, 0, 0, 0, 1, 1, 1, 1, 2, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 0, 0, 0, 0, 0, 2, 5, 0, 2, 2, 2, 5, 5, 5, 2, 2, 8, 8, 2, 8, 8, 2, 8, 5, 5, 3, 2, 8, 5, 5, 5, 8, 8, 8, 8, 2, 2, 8, 8, 8, 8, 8, 5, 8, 8, 8, 8, 8, 8, 8, 2, 8, 2, 8, 8, 8, 8, 8, 5, 5, 8, 8, 8, 8, 8, 8, 8, 5, 2, 5, 5, 8, 8, 8, 8, 5, 8, 5, 8, 5, 2, 5, 5, 8, 5, 5, 2, 5, 8, 5, 2, 2, 5, 8, 2, 0, 2, 2, 2, 2, 2},
//                        {0, 0, 2, 5, 5, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 5, 5, 2, 0, 2, 5, 5, 0, 2, 5, 2, 8, 8, 5, 5, 2, 1, 7, 7, 6, 7, 6, 7, 7, 7, 7, 7, 7, 7, 1, 4, 1, 4, 1, 1, 1, 4, 4, 4, 1, 1, 4, 1, 4, 0, 4, 0, 8, 0, 0, 2, 8, 8, 8, 8, 7, 5, 8, 8, 8, 1, 0, 0, 0, 1, 4, 2, 7, 1, 4, 4, 1, 4, 3, 0, 0, 1, 1, 2, 5, 5, 5, 8, 8, 5, 0, 2, 8, 8, 5, 5, 5, 4, 2, 8, 8, 8, 5, 8, 8, 5, 8}};
//        //System.out.println(data_original[0]);
//        
////        ArrayList data = new ArrayList();
////        for(int i = 0; i < data_original.length; i++){
////            ArrayList<Integer> tempData = new ArrayList<Integer>();
////            for(int j = 0; j < data_original[i].length; i++){
////                if(j < 100){
////                    tempData.add(new Integer(data_original[i][j]));
////                }
////            }
////            data.add(tempData);
////        }
//        
//        //System.out.print(data);
//        
//        
//        
        int totalRow = 39;
        char[][] data = new char[totalRow][];
        File file = new File("src/hmmArrayTraining (TEST ZONE).txt");
        Scanner scanner = new Scanner(file);

        
        
        for (int row = 0; scanner.hasNextLine() && row < totalRow; row++) {
            data[row] = scanner.nextLine().toCharArray();
        }
        
        
        /* Read data into Observation sequences */
        Vector sequences = new Vector();
        for (int i = 0; i < data.length; i++) {
            //System.out.println("Value of i: " + i);
            
            
            Vector sequence = new Vector();
            for (int j = 0; j < data[i].length; j++) {
//                if(Character.isDigit(data[i][j]) && Character.isDigit(data[i][j+1])){ //////////////// NOW INCLUDING PANELS
//                    
//                    String tempString = data[i][j] + "" + data[i][j+1];
//                    int tempValue = Integer.parseInt(tempString);
//                    
//                    ObservationInteger obs = new ObservationInteger(tempValue);
//                    sequence.add(obs);
                    
                    ////////////////// BELOW IS FOR ORIGINAL HMM MODEL USING ONLY ACTIONS & SIGNIFICANCE (NO PANELS INCLUDED)/////////
                    if(data[i][j] == '1'){
                        
                        try{
                            if(Character.isDigit(data[i][j+1])){
                                int tempValue = data[i][j+1] - '0';
                                tempValue = tempValue + 10; //Adds 10 to get it to its actual value (ex: if 12 --> 2 + 10 = 12)

                                ObservationInteger obs = new ObservationInteger(tempValue);

                                sequence.add(obs);                                                          
                            }
                        } catch(Exception e){
                            
                        }
                    }
                    
                    if(Character.isDigit(data[i][j])){
                        int tempValue = data[i][j] - '0';

                        ObservationInteger obs = new ObservationInteger(tempValue);

                        //ObservationInteger obs = new ObservationInteger(Character.getNumericValue(data[i][j]));

                        sequence.add(obs);                        
                    }



                //}
            }
            sequences.add(sequence);
        }


        /* K-Means approximation derives the initial HMM */
	KMeansLearner kml = new KMeansLearner(3, new OpdfIntegerFactory(10), sequences); 
	Hmm initHmm = kml.learn();
        
        /* Baum-Welch learning refines the HMM for another __ iterations*/
	//BaumWelchLearner bwl = new BaumWelchLearner();
        BaumWelchScaledLearner bwl = new BaumWelchScaledLearner(); //Scaled version of BaumWelchLearner apparently works for extremely long sequences
        //KullbackLeiblerDistanceCalculator klc =  new KullbackLeiblerDistanceCalculator();
        
        Hmm learntHmm = bwl.iterate(initHmm, sequences);
        for(int i = 0; i < 10; i++){
            //System.out.println("Distance at iteration " + i + ": " + klc.distance(learntHmm, hmm)); 
            learntHmm = bwl.iterate(initHmm, sequences);
        }

        System.out.println("Resulting HMM_1:\n" + learntHmm);
        
        
        
        /* K-Means approximation derives the initial HMM */
	KMeansLearner km2 = new KMeansLearner(4, new OpdfIntegerFactory(10), sequences); 
	Hmm initHmm2 = km2.learn();
        
        /* Baum-Welch learning refines the HMM for another __ iterations*/
	//BaumWelchLearner bwl = new BaumWelchLearner();
        BaumWelchScaledLearner bw2 = new BaumWelchScaledLearner(); //Scaled version of BaumWelchLearner apparently works for extremely long sequences
        //KullbackLeiblerDistanceCalculator klc =  new KullbackLeiblerDistanceCalculator();
        
        Hmm learntHmm2 = bw2.iterate(initHmm2, sequences);
        for(int i = 0; i < 10; i++){
            //System.out.println("Distance at iteration " + i + ": " + klc.distance(learntHmm, hmm)); 
            learntHmm2 = bw2.iterate(initHmm2, sequences);
        }

        System.out.println("Resulting HMM:\n" + learntHmm2);
        
        
        
        
        /* K-Means approximation derives the initial HMM */
	KMeansLearner km3 = new KMeansLearner(5, new OpdfIntegerFactory(10), sequences); 
	Hmm initHmm3 = km3.learn();
        
        /* Baum-Welch learning refines the HMM for another __ iterations*/
	//BaumWelchLearner bwl = new BaumWelchLearner();
        BaumWelchScaledLearner bw3 = new BaumWelchScaledLearner(); //Scaled version of BaumWelchLearner apparently works for extremely long sequences
        //KullbackLeiblerDistanceCalculator klc =  new KullbackLeiblerDistanceCalculator();
        
        Hmm learntHmm3 = bw3.iterate(initHmm3, sequences);
        for(int i = 0; i < 10; i++){
            //System.out.println("Distance at iteration " + i + ": " + klc.distance(learntHmm, hmm)); 
            learntHmm3 = bw3.iterate(initHmm3, sequences);
        }

        System.out.println("Resulting HMM:\n" + learntHmm3);
        
        

        
        /* K-Means approximation derives the initial HMM */
	KMeansLearner km4 = new KMeansLearner(6, new OpdfIntegerFactory(10), sequences); 
	Hmm initHmm4 = km4.learn();
        
        /* Baum-Welch learning refines the HMM for another __ iterations*/
	//BaumWelchLearner bwl = new BaumWelchLearner();
        BaumWelchScaledLearner bw4 = new BaumWelchScaledLearner(); //Scaled version of BaumWelchLearner apparently works for extremely long sequences
        //KullbackLeiblerDistanceCalculator klc =  new KullbackLeiblerDistanceCalculator();
        
        Hmm learntHmm4 = bw4.iterate(initHmm4, sequences);
        for(int i = 0; i < 10; i++){
            //System.out.println("Distance at iteration " + i + ": " + klc.distance(learntHmm, hmm)); 
            learntHmm4 = bw4.iterate(initHmm4, sequences);
        }

        System.out.println("Resulting HMM:\n" + learntHmm4);
        
//        Hmm learntHmm = bwl.iterate(initHmm);
//	for (int i = 0; i < 10; i++) {
//	    learntHmm = bwl.iterate(learntHmm);
//	}
//        Reader reader = new FileReader("src/hmmVectorTraining.txt");
//        List<List<ObservationVector>> seqs = ObservationSequencesReader.readSequences(new ObservationVectorReader(), reader);
//        reader.close();
//        
//        KMeansLearner <ObservationVector> kml = new KMeansLearner <ObservationVector >(3 , new OpdfMultiGaussianFactory (1) , seqs);
//        Hmm <ObservationVector > fittedHmm = kml.learn () ;
//        //Hmm<ObservationInteger> hmm = new Hmm<ObservationInteger>(3, new OpdfDiscreteFactory(15), seqs);


//        String numberList = "6, 4, 1, 7, 7, 7, 1, 8, 7, 7, 7, 8, 7, 7, 8, 10, 4, 4, 7, 7, 7, 7, 7, 5, 1, 7, 8, 8, 7, 7, 8, 8, 8, 7, 7, 8, 8, 5, 7, 4, 8, 7, 4, 8, 5, 5, 4, 4, 8, 8, 2, 7, 4, 8, 8, 2, 7, 7, 8, 4, 4, 3, 7, 1, 11, 4, 12, 4, 4, 7, 4, 7, 7, 7, 7, 7, 8, 7, 0, 11, 4, 8, 7, 7, 2, 1, 7, 8, 8, 8, 7, 4, 8, 8, 8, 7, 7, 1, 4, 5, 7, 7, 7, 7, 8, 8, 5, 4, 7, 7, 7, 8, 7, 4, 8, 5, 5, 7, 7, 7, 7, 8, 7, 7, 7, 7, 2, 5, 3, 7, 10, 1, 8, 1, 7, 10, 10, 10, 10, 10, 11, 10, 10, 11, 11, 11, 11, 1, 7, 1, 7, 8, 7, 7, 8, 7, 4, 8, 7, 7, 7, 7, 8, 7, 7, 1, 7, 8, 7, 7, 8, 8, 8, 7, 7, 8, 4, 7, 1, 7, 7, 7, 8, 3, 4, 10, 4, 1, 12, 4, 4, 7, 4, 7, 4, 8, 7, 7, 7, 8, 8, 7, 7, 7, 7, 8, 4, 7, 7, 7, 7, 7, 8, 8, 7, 7, 4, 3, 11, 0, 1, 5, 7, 7, 8, 7, 7, 8, 7, 7, 4, 7, 7, 7, 5, 2, 0, 4, 11, 5, 7, 8, 7, 7, 8, 7, 7, 7, 4, 4, 4, 0, 7, 10, 4, 1, 7, 8, 8, 7, 4, 8, 7, 7, 8, 8, 8, 7, 7, 7, 7, 4, 7, 8, 8, 5, 5, 2, 7, 7, 7, 1, 7, 7, 8, 8, 5, 7, 4, 8, 8, 2, 8, 8, 8, 7, 7, 8, 8, 7, 7, 8, 4, 4, 8, 8, 8, 7, 4, 8, 8, 5, 5, 2, 7, 7, 8, 4, 7, 8, 4, 1, 7, 7, 1, 7, 7, 7, 8, 5, 2, 1, 1, 4, 2, 2, 8, 7, 7, 7, 7, 8, 8, 8, 8, 4, 12, 4, 7, 7, 4, 0, 11, 7, 7, 7, 7, 7, 8, 5, 2, 4, 7, 8, 7, 4, 7, 7, 8, 4, 7, 8, 7, 7, 7, 7, 8, 8, 2, 8, 7, 7, 8, 7, 7, 8, 4, 4, 7, 7, 8, 8, 4, 7, 7, 7, 8, 7, 4, 8, 1, 1, 8, 8, 7, 7, 5, 8, 0, 7, 10, 7, 1, 12, 4, 8, 7, 0, 4, 7, 7, 8, 11, 5, 8, 2, 2, 7, 7, 7, 12, 4, 7, 7, 4, 0, 4, 11, 7, 7, 5, 5, 0, 10, 2, 2, 8, 7, 7, 8, 8, 7, 7, 8, 8, 7, 7, 8, 8, 8, 7, 7, 8, 8, 4, 7, 1, 7, 7, 12, 4, 4, 7, 4, 4, 4, 0, 11, 4, 5, 5, 5, 5, 0, 10, 4, 1, 8, 2, 8, 8, 5, 8, 8, 8, 5, 2, 8, 2, 2, 4, 0, 4, 8, 2, 2, 2, 2, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 4, 7, 7, 1, 1, 5, 8, 5, 5, 7, 7, 7, 12, 4, 2, 4, 0, 4, 8, 8, 5, 11, 5, 0, 10, 2, 2, 7, 8, 7, 7, 1, 8, 8, 8, 7, 7, 4, 1, 5, 5, 4, 7, 7, 7, 4, 12, 4, 4, 7, 1, 7, 4, 7, 8, 5, 5, 7, 4, 8, 5, 8, 4, 4, 5, 4, 7, 7, 7, 8, 8, 4, 7, 4, 8, 7, 7";        
//        int numberListLength = 1;
//        for(int i = 1; i < numberList.length(); i++){
//            if(Character.isDigit(numberList.charAt(i)) && !Character.isDigit(numberList.charAt(i-1))){
//                numberListLength++;
//            }
//        }
//        System.out.println("Number list length: " + numberListLength);







    






    }
    
    
    public static boolean stringIsInt(String string){
        try {
            Integer.parseInt(string);
        } catch (NumberFormatException e) {
            return false;
        }
        return true;
    }
    
    
}
